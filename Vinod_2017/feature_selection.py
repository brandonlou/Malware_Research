import os
import sys

def separability_analysis(samples, feature):
    sum_malign = 0
    sum_benign = 0

    O = dict()
    TF = dict()
    IDF = dict()
    TF_IDF_M = dict()
    TF_IDF_B = dict()

    for i in range(min(len(samples), |M|)):

        # Calculate occurance of feature in this sample.
        O[samples[i]] = 0
        for api_call in samples[i]:
            if api_call == feature:
                O[samples[i]] += 1
        
        most_occuring_feature = ...
        TF[samples[i]] = O[samples[i]] / most_occuring feature
        IDF_M = log(number of features / )
        TF_IDF_M[samples[i]] = TF[samples[i]] * IDF_M
        sum_malign += TF_IDF_M[samples[i]]
    
    mean_TF_IDF_M = sum_malign / size of malign features

    for i in range(len(samples)):
        TF[samples[i]] = O[samples[i]] / max
        IDF_B = log()
        TF_IDF_B[samples[i]] = TF[samples[samples[i]]] * IDF_B
        sum_benign += TF_IDF_B[samples[i]]
    
    mean_TF_IDF_B = sum_benign / |B|

    sum_malign = 0
    for i in range(min(len(samples, |M|)))
        sum_malign += (TF_IDF_M[samples[i]] - mean_TF_IDF_M)**2

    # Variance of feature in Malware class.
    var_M = sum_malign / |M|

    sum_benign = 0
    while i != size of benign features:
        sum_benign += (TF_IDF_B[samples[i]] - mean_TF_IDF_B)**2
    
    # Variance of feature in Benign class.
    var_B = sum_benign / |B|

    # Compute Within class variablity.
    within_class_var = (prior_prob_M * var_M) + (prior_prob_B * var_B)
    
    # Overall mean TF-IDF of feature.
    mean_TF_IDF = 

    # Compute between class variability as variance of class centers with
    # respect to global centers.
    btwn_class_var = ((mean_TF_IDF_M - mean_TF_IDF)**2 + (mean_TF_IDF_B - mean_TF_IDF)**2) / (size of M + size of B)
    
    # Compute total variability (I assumed a typo)
    total_var = within_class_var + btwn_class_var

    # Compute separability score of the feature.
    score = total_var / within_class_var

    return score


def main():
    if len(sys.argv) != 3:
        print('USAGE: python %s [input directory [output file]' % sys.argv[0])

    input_dir = sys.argv[1]
    output_file = sys.argv[2]

    # Delete file before appending to it to overwrite.
    if os.path.exists(output_file):
        os.remove(output_file)
    
    for filename in os.listdir(input_dir):
        with open(input_dir + '/' + filename) as infile:
            try:
                lines = infile.readlines()
            except:
                continue
        
        # Strip all new lines.
        lines = [lines[i].strip() for i in range(len(lines))]

        verdict = lines[0]

        # Do Scatter/Separability Assessment for feature selection

        # Make each element of feature vector the TF-IDF weight of a system call.

if __name__ == "__main__":
    main()
