import csv
import pickle
import sys
from numpy import array, mean
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, roc_auc_score, f1_score
from sklearn.model_selection import KFold


NUM_FOLDS = 10
NUM_ESTIMATORS = 100


def main():
    if len(sys.argv) not in (2, 3):
        print('USAGE: python %s <input data file> [model export file]' % sys.argv[0])

    X_data = list()
    y_data = list()

    with open(sys.argv[1], 'rt') as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        for row in csv_reader:
            X_data.append(list(map(float, row[:-1]))) # All but the last element.
            y_data.append(int(row[-1])) # The last element.

    # Convert to numpy arrays.
    X_data = array(X_data)
    y_data = array(y_data)

    # Prepare cross-validation procedure.
    kfold = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=1)

    accuracy  = list()
    precision = list()
    recall    = list()
    auc       = list()
    num_fp    = list()
    f1        = list()

    for train, test in kfold.split(y_data):
        rfc = RandomForestClassifier(n_estimators=NUM_ESTIMATORS)
        rfc.fit(X_data[train], y_data[train])
        y_pred = rfc.predict(X_data[test])
        
        accuracy.append(accuracy_score(y_data[test], y_pred))
        precision.append(precision_score(y_data[test], y_pred))
        recall.append(recall_score(y_data[test], y_pred))
        auc.append(roc_auc_score(y_data[test], y_pred))
        f1.append(f1_score(y_data[test], y_pred))
        _, fp, _, _ = confusion_matrix(y_data[test], y_pred).ravel()
        num_fp.append(fp)

    # Report performance.
    print('Using %d-fold Cross Validation' % NUM_FOLDS)
    print('Accuracy: %.3f' % mean(accuracy))
    print('Precision: %.3f' % mean(precision))
    print('Recall: %.3f' % mean(recall))
    print('AUC: %.3f' % mean(auc))
    print('Number false positives: %.3f' % mean(num_fp))
    print('F1 Score: %.3f' % mean(f1))

    # Export model.
    if len(sys.argv) == 3:
        rfc = RandomForestClassifier(n_estimators=NUM_ESTIMATORS)
        rfc.fit(X_data, y_data)
        pickle.dump(rfc, open(sys.argv[2], 'wb'))
        print('Saved model to %s.' % sys.argv[2])

if __name__ == "__main__":
    main()

