import multiprocessing as mp
import pickle
import sys
from numpy import array, mean
from sklearn.model_selection import KFold
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, \
                            precision_score, recall_score, roc_auc_score
from sklearn.feature_selection import RFE
from sklearn.pipeline import Pipeline
from utils.blr import EBLogisticRegression


RFE_NUM_FEATURES = 380 # Number of features in our work.
NUM_FOLDS = 10


def get_model():
    # Set dual false because n_samples > n_features.
    rfe = RFE(estimator=LinearSVC(dual=False),
              n_features_to_select=RFE_NUM_FEATURES)
    blr = EBLogisticRegression()
    model = Pipeline(steps=[('s', rfe), ('c', blr)])
    return model


def evaluate_model(X_train, y_train, X_test, y_test, accuracy, precision, \
                   recall, auc, num_fp, f1):
    # Fit model to train data.
    model = get_model()
    model.fit(X_train, y_train)

    # Predict on test data.
    y_pred = model.predict(X_test)

    # Calculate metrics.
    accuracy.append(accuracy_score(y_test, y_pred))
    precision.append(precision_score(y_test, y_pred))
    recall.append(recall_score(y_test, y_pred))
    auc.append(roc_auc_score(y_test, y_pred))
    num_fp.append(confusion_matrix(y_test, y_pred).ravel()[1])
    f1.append(f1_score(y_test, y_pred))

    print('Info: Finished one fold')


def main():
    if len(sys.argv) not in (2, 3):
        print(f'Usage: python {sys.argv[0]} <data pkl> [export model pkl]')
        exit()

    with open(sys.argv[1], 'rb') as data_file:
        data = pickle.load(data_file)
        print(f'Info: Loaded {sys.argv[1]}')
    X_data = array(data[0])
    y_data = array(data[1])

    # Prepare cross-validation procedure.
    kfold = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=1)

    manager = mp.Manager()

    accuracy  = manager.list()
    precision = manager.list()
    recall    = manager.list()
    auc       = manager.list()
    num_fp    = manager.list()
    f1        = manager.list()

    pool = mp.Pool(mp.cpu_count())
    for train, test in kfold.split(X_data, y_data):
        pool.apply_async(evaluate_model, (X_data[train], y_data[train],
                         X_data[test], y_data[test], accuracy, precision,
                         recall, auc, num_fp, f1))
    pool.close()
    pool.join()

    # Report model performance.
    print(f'Using {NUM_FOLDS}-fold Cross Validation')
    print(f'Accuracy: {mean(accuracy):.3f}')
    print(f'Precision: {mean(precision):.3f}')
    print(f'Recall: {mean(recall):.3f}')
    print(f'AUC: {mean(auc):.3f}')
    print(f'Number false positives: {mean(num_fp):.3f}')
    print(f'F1 Score: {mean(f1):.3f}')

    # Save model.
    if len(sys.argv) == 3:
        model = get_model()
        model.fit(X_data, y_data)
        with open(sys.argv[2], 'wb') as model_file:
            pickle.dump(model, model_file, protocol=4)
            print(f'Saved model as {sys.argv[2]}')


if __name__ == "__main__":
    main()

