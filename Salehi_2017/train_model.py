import csv
import pickle
import sys
from numpy import mean
from sklearn.model_selection import KFold
from sklearn import svm
from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, precision_score, recall_score, roc_auc_score
from sklearn.feature_selection import RFE
from sklearn.pipeline import Pipeline
from utils.blr import EBLogisticRegression, VBLogisticRegression


RFE_NUM_FEATURES = 380 # Number of features in our work.
NUM_FOLDS = 10


if len(sys.argv) != 2 or len(sys.argv) != 3:
    print(f'Usage: python {sys.argv[0]} <data file> [export model file]')
    exit()

data = pickle.load(open(sys.argv[1], 'rb'))
X_data = data[0]
y_data = data[1]

# Get data from CSV file in the format (x, y).
# X_data = list()
# y_data = list()
# with open(sys.argv[1], 'rt') as csv_file:
#     csv_reader = csv.reader(csv_file, delimiter=',')
#     for row in csv_reader:
#         vector = list(map(int, row[0]))
#         verdict = int(row[1])
#         X_data.append(vector)
#         y_data.append(verdict)


# Prepare cross-validation procedure.
kfold = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=1)

accuracy  = list()
precision = list()
recall    = list()
auc       = list()
num_fp    = list()
f1        = list()

for train, test in kfold.split(X_data, y_data):
    # Create model.
    rfe = RFE(estimator=svm.LinearSVC(), n_features_to_select=RFE_NUM_FEATURES)
    blr = EBLogisticRegression()
    model = Pipeline(steps=[('s', rfe), ('c', blr)])

    # Fit model to train data.
    model.fit(X_data[train], y_data[train])

    # Predict on test data.
    y_pred = model.predict(X_data[test])

    # Calculate metrics.
    accuracy.append(accuracy_score(y_data[test], y_pred))
    precision.append(precision_score(y_data[test], y_pred))
    recall.append(recall_score(y_data[test], y_pred))
    auc.append(roc_auc_score(y_data[test], y_pred))
    num_fp.append(confusion_matrix(y_data[test], y_pred).ravel()[1])
    f1.append(f1_score(y_data[test], y_pred))

# Report model performance.
print(f'Using {NUM_FOLDS}-fold Cross Validation')
print(f'Accuracy: {mean(accuracy):.3f}')
print(f'Precision: {mean(precision):.3f}')
print(f'Recall: {mean(recall):.3f}')
print(f'AUC: {mean(auc):.3f}')
print(f'Number false positives: {mean(num_fp):.3f}')
print(f'F1 Score: {mean(f1):.3f}')

# Save model.
if len(sys.argv) == 3:
    pickle.dump(model, open(sys.argv[1], 'wb'))
    print(f'Saved model as {sys.argv[1]}')
