import csv
import pickle
import sys
from numpy import mean, var


FISHER_NUM_FEATURES = 1000


def get_fisher_score(mal_samples, ben_samples, feature: int, size_mal: int, size_ben: int):
    ben_values = list()
    mal_values = list()
    for sample in ben_samples:
        ben_values.append(sample[feature])
    for sample in mal_samples:
        mal_values.append(sample[feature])
    avg_ben_value = mean(ben_values)
    avg_mal_value = mean(mal_values)
    avg_value = mean(ben_values + mal_values)
    var_ben_value = var(ben_values)
    var_mal_value = var(mal_values)
    numerator = (size_ben * (avg_ben_value - avg_value)**2) + (size_mal * (avg_mal_value - avg_value)**2)
    denominator = (size_ben * var_ben_value) + (size_mal * var_mal_value)
    fisher_score = numerator / denominator
    return fisher_score

def main():
    # Prevent csv field size overflow error.
    csv.field_size_limit(sys.maxsize)

    if len(sys.argv) not in (3, 4):
        print(f'Usage: python {sys.argv[0]} <data input file> <data output file> [feature output file]')
        exit()

    mal_samples = list()
    mal_verdicts = list()
    ben_samples = list()
    ben_verdicts = list()

    # Get data from CSV file in the format (x, y).
    with open(sys.argv[1], 'rt') as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        for row in csv_reader:
            vector = list(map(int, row[0])) # Parse bitstring to a list of 0's and 1's.
            verdict = int(row[1])
            if verdict == 0:
                ben_samples.append(vector)
                ben_verdicts.append(verdict)
            elif verdict == 1:
                mal_samples.append(vector)
                mal_verdicts.append(verdict)

    # Compute number of malware and benign samples to avoid recomputing them
    # in the future.
    size_ben = len(ben_samples)
    size_mal = len(mal_samples)

    # Compute fisher score.
    scores = list()
    for feature in range(len(mal_samples[0])):
        scores.append(get_fisher_score(mal_samples, ben_samples, feature, size_mal, size_ben))

    # Get the top features by their indices.
    top_indices = sorted(range(len(scores)), key = lambda sub: scores[sub])[-FISHER_NUM_FEATURES:]
    top_indices.reverse()

    # Only include selected features in our data.
    for i in range(len(mal_samples)):
        mal_samples[i] = [mal_samples[i][j] for j in top_indices]
    for i in range(len(ben_samples)):
        ben_samples[i] = [ben_samples[i][j] for j in top_indices]

    with open(sys.argv[2], 'wt') as output_file:
        for i in range(len(mal_samples)):
            vector = ''.join(map(str, mal_samples[i]))
            verdict = mal_verdicts[i]
            output_file.write(f'{vector},{verdict}\n')
        for i in range(len(ben_samples)):
            vector = ''.join(map(str, ben_samples[i]))
            verdict = ben_verdicts[i]
            output_file.write(f'{vector},{verdict}\n')

    if len(sys.argv) == 4:
        pickle.dump(top_indices, open(sys.argv[3], 'wb'))
        print(f'Saved top features indices to {sys.argv[3]}')


if __name__ == "__main__":
    main()

