import csv
import multiprocessing as mp
import pickle
import sys
from numpy import mean, var


FISHER_NUM_FEATURES = 2000


def get_fisher_score(mal_samples, ben_samples, feature: int, size_mal: int, size_ben: int):
    ben_values = list()
    mal_values = list()
    for sample in ben_samples:
        ben_values.append(sample[feature])
    for sample in mal_samples:
        mal_values.append(sample[feature])
    avg_ben_value = mean(ben_values)
    avg_mal_value = mean(mal_values)
    avg_value = mean(ben_values + mal_values)
    var_ben_value = var(ben_values)
    var_mal_value = var(mal_values)
    numerator = (size_ben * (avg_ben_value - avg_value)**2) + (size_mal * (avg_mal_value - avg_value)**2)
    denominator = (size_ben * var_ben_value) + (size_mal * var_mal_value)
    fisher_score = numerator / denominator
    return fisher_score


def main():
    if len(sys.argv) not in (3, 4):
        print(f'Usage: python {sys.argv[0]} <data input pkl> <data output pkl> [indices output pkl]')
        exit()

    mal_samples = list()
    mal_verdicts = list()
    ben_samples = list()
    ben_verdicts = list()

    with open(sys.argv[1], 'rb') as input_file:
        data = pickle.load(input_file)

    while len(data) > 0:
        entry = data[0]
        vector = entry[:-1] # X data is all but the last element.
        verdict = entry[-1] # y data is the last element.
        if verdict == 0:
            ben_samples.append(vector)
            ben_verdicts.append(verdict)
        elif verdict == 1:
            mal_samples.append(vector)
            mal_verdicts.append(verdict)
        else:
            print('Error: At least one verdict in data pickle was not 0 or 1.')
            exit()
        data.pop(0) # Remove entries from the data list as we process them to save memory.

    # Compute number of malware and benign samples to avoid recomputing them
    # in the future.
    size_ben = len(ben_samples)
    size_mal = len(mal_samples)
    num_features = len(mal_samples[0])

    scores = list()

    # Compute fisher score.
    for feature in range(num_features):
        scores.append(get_fisher_score(mal_samples, ben_samples, feature, size_mal, size_ben))
        print(feature)

    # Get the top features by their indices.
    top_indices = sorted(range(len(scores)), key = lambda sub: scores[sub])[-FISHER_NUM_FEATURES:]
    top_indices.reverse()

    # Only include selected features in our data.
    for i in range(len(mal_samples)):
        mal_samples[i] = [mal_samples[i][j] for j in top_indices]
    for i in range(len(ben_samples)):
        ben_samples[i] = [ben_samples[i][j] for j in top_indices]

    # Save data.
    mal_samples.extend(ben_samples) # Extend existing list to save memory on constructing a new list.
    mal_verdicts.extend(ben_verdicts)
    with open(sys.argv[2], 'wb') as output_file:
        pickle.dump((mal_samples, mal_verdicts), output_file, protocol=4)
        print(f'Saved feature selected data to {sys.argv[2]}')

    # Save top feature indices.
    if len(sys.argv) == 4:
        with open(sys.argv[3], 'wb') as output_file:
            pickle.dump(top_indices, output_file, protocol=4)
            print(f'Saved top features indices to {sys.argv[3]}')


if __name__ == "__main__":
    main()

