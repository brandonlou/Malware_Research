import json
import os
import sys
from utils.valid_api import is_valid_api

if len(sys.argv) != 4:
    print('Usage: python3 %s [reports directory] [0/1] [output directory]' % sys.argv[0])
    exit()

input_dir = sys.argv[1]
if sys.argv[2] == '1':
    verdict = 1 # Malicious.
elif sys.argv[2] == '0':
    verdict = 0 # Benign.
else:
    print('Usage: python3 %s [reports directory] [0/1] [output directory]' % sys.argv[0])
    exit()
output_dir = sys.argv[3]

for filename in os.listdir(input_dir):

    with open(input_dir + '/' + filename, 'r') as cuckoo_report:
        try:
            data = json.load(cuckoo_report)
        except:
            print('ERROR: Could not parse %s as JSON' % filename)
            continue
    
    behavior = data.get('behavior')
    if behavior is None:
        print('ERROR: %s has no behavior section' % filename)
        continue

    processes = behavior.get('processes')
    if processes is None:
        print('Error: %s has no processes section' % filename)
        continue

    # Remove the output file first if it exists because we want to overwrite
    # and append to it.
    output_file = output_dir + '/' + filename + '.txt'
    if os.path.exists(output_file):
        os.remove(output_file)

    # Write 0 (benign) or 1 (malicious) as the first line of the output file.
    with open(output_file, 'a') as outfile:
        outfile.write('%d\n' % verdict)

    for process in processes:
        for call in process.get('calls'):

            api_name = call.get('api')
            if api_name is None:
                print('Warning: %s has an API call with no API name' % filename)
                continue
            if not is_valid_api(api_name):
                continue

            return_value = call.get('return_value')
            if return_value is None:
                print('Warning: %s has an API call with no return value' % filename)
                continue

            arguments = call.get('arguments')
            if arguments is None:
                print('Warning: %s has an API call with no arguments' % filename)
                continue

            if len(arguments) == 0:
                with open(output_file, 'a') as outfile:
                    outfile.write('%s...%s\n' % (api_name, return_value))
            else:
                for arg_index in range(len(arguments)):
                    arg_value = list(arguments.values())[arg_index] # TODO: Alphabeticalize keys to be consistent?
                    arg_value = str(arg_value)[:500] # Limit arguments to 500 characters.
                    with open(output_file, 'a') as outfile:
                        try:
                            outfile.write('%s.%d.%s.%s\n' % (api_name, arg_index + 1, arg_value, return_value))
                        except:
                            print('Warning: Skipping UTF-16 arguments in %s' % filename)

    print('Success: %s' % filename)
