import csv
import multiprocessing as mp
import os
import sys


# Set of all features.
feature_set = set()

# Lock to access the global feature set.
lock = mp.Lock()

feature_tuple = tuple()


def process_report(input_dir: str, filename: str):
    with open(input_dir + '/' + filename) as infile:
        try:
            lines = infile.readlines()
        except:
            print('Error: Cannot read', filename)
            return
    
    # Skip first line because it tells the verdict and isn't an API call.
    for i in range(1, len(lines)):
        lines[i] = lines[i].strip() # Remove the newline at the end of string.
        lock.acquire()
        feature_set.add(lines[i])
        lock.release()
    
    print('Read features:', filename)


def generate_feature(input_dir, filename, output_file):
    with open(input_dir + '/' + filename) as infile:
        try:
            lines = infile.readlines()
        except:
            return
    for i in range(len(lines)):
        lines[i] = lines[i].strip()
    verdict = lines[0]
    vector = str()
    for feature in feature_tuple:
        if feature in lines[1:]:
            vector += '1'
        else:
            vector += '0'
    with open(output_file, 'a') as csv_file:
        csv_writer = csv.writer(csv_file)
        lock.acquire()
        csv_writer.writerow([vector, verdict])
        lock.release()
    print('Success:', filename)


def main():
    if len(sys.argv) != 3:
        print('USAGE: %s [input directory] [output file]' % sys.argv[0])
        exit()

    input_dir = sys.argv[1]
    output_file = sys.argv[2]

    pool = mp.Pool()

    for filename in os.listdir(input_dir):
        pool.apply_async(process_report, args=(input_dir, filename))

    pool.close()
    pool.join()

    # Convert set to tuple because it's ordered.
    feature_tuple = tuple(feature_set)

    for filename in os.listdir(input_dir):
        pool.apply_async(generate_feature, args=(input_dir, filename, output_file))
    pool.close()
    pool.join()


if __name__ == "__main__":
    main()
