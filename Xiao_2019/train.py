import pickle
import sys
from sklearn.model_selection import KFold


LAYER1_FEATURES = 5000
LAYER2_FEATURES = 2000
LAYER3_FEATURES = 500
NUM_FOLDS = 10
BATCH_SIZE = 1000 # TODO
EPOCHS = 100


def main():
    if len(sys.argv) < 2:
        print(f'Usage: python3 {sys.argv[0]} <data pickle>')
        exit()

    X_data = []
    y_data = []
    with open(sys.argv[1], 'rt') as pickled_data:
        data = pickle.load(pickled_data)
        for row in data:
            X_data.append(row[1:])
            y_data.append(row[0])

    kfold = KFold(n_splits=NUM_FOLDS, shuffle=True)

    # accuracy = []
    # precision = []
    # recall = []
    # auc = []
    # num_fp = []
    # f1 = []

    for train, test in kfold.split(X_data, y_data):
        X_train = X_data[train]
        y_train = y_data[train]
        X_test = X_data[test]
        y_test = y_data[test]

        inputs = keras.Input()
        encoder1 = keras.layers.Dense(LAYER1_FEATURES, activation='relu')(inputs)
        encoder2 = keras.layers.Dense(LAYER2_FEATURES, activation='relu')(encoder1)
        encoder3 = keras.layers.Dense(LAYER3_FEATURES, activation='relu')(encoder2)
        decoder2 = keras.layers.Dense(LAYER2_FEATURES, activation='relu')(encoder3)
        output   = keras.layers.Dense(LAYER1_FEATURES, activation='sigmoid')(decoder2)

        sae_model = keras.models.Model(inputs, outputs)
        sae_model.compile(loss='binary_crossentropy', optimizer=keras.optimizer.SGD(lr=1.5))
        sae_model.summary()

        # something = sae_model.fit(X_train, y_train, epochs=EPOCHS, validation_data=[X_test, y_test])

        # show_reconstructions(sae_model)


    # # Report model performance.
    # print(f'Using {NUM_FOLDS}-fold Cross Validation')
    # print(f'Accuracy: {mean(accuracy):.3f}')
    # print(f'Precision: {mean(precision):.3f}')
    # print(f'Recall: {mean(recall):.3f}')
    # print(f'AUC: {mean(auc):.3f}')
    # print(f'Number false positives: {mean(num_fp):.3f}')
    # print(f'F1 Score: {mean(f1):.3f}')


if __name__ == "__main__":
    main()
