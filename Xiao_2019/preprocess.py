import argparse
import os
import pickle
from api_graph import api_graph


def main():
    parser = argparse.ArgumentParser(description='Convert Cuckoo JSON reports to API behavior graphs')
    parser.add_argument('malicious_dir')
    parser.add_argument('benign_dir')
    parser.add_argument('output_file')
    args = parser.parse_args()

    malicious_dir = args.malicious_dir
    benign_dir = args.benign_dir
    output_file = args.output_file

    global_seqs = set()
    mfiles_to_seqs = {} 
    bfiles_to_seqs = {}

    for filename in os.listdir(malicious_dir):
        filepath = f'{malicious_dir}/{filename}'
        all_seqs = api_graph(filepath)
        if not all_seqs:
            continue
        mfiles_to_seqs[filename] = all_seqs
        for seq in all_seqs:
            global_seqs.add(seq)
        print(f'Processed {filepath}')

    for filename in os.listdir(benign_dir):
        filepath = f'{benign_dir}/{filename}'
        all_seqs = api_graph(filepath)
        if not all_seqs:
            continue
        bfiles_to_seqs[filename] = all_seqs
        for seq in all_seqs:
            global_seqs.add(seq)
        print(f'Processed {filepath}')

    output_data = []
    # Do one hot encoding
    for filename in mfiles_to_seqs:
        local_seqs = mfiles_to_seqs[filename]
        row = []
        row.append(1)
        for seq in global_seqs:
            if seq in local_seqs:
                row.append(1)
            else:
                row.append(0)
        output_data.append(tuple(row))

    for filename in bfiles_to_seqs:
        local_seqs = bfiles_to_seqs[filename]
        row = []
        row.append(0)
        for seq in global_seqs:
            if seq in local_seqs:
                row.append(1)
            else:
                row.append(0)
        output_data.append(tuple(row))

    # Save data as a pickle file
    with open(output_file, 'wb') as pkl_file:
        pickle.dump(output_data, pkl_file)
        print(f'Saved data to {output_file}')


if __name__ == '__main__':
    main()

