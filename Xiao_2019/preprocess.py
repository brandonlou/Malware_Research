import argparse
import json
import os

def process_api_call(api):
    if api == 'NtQueryAttributesFile':
        pass

    elif api == 'NtReadFile':
        file_handle = call.get('arguments')[0].get('value')

    elif api == 'NtWriteFile':
        file_handle = call.get('arguments')[0].get('value')

    elif api == 'NtCreateFile':
        file_handle = call.get('arguments')[0].get('value')
        filename = call.get('arguments')[2].get('value')

    elif api == 'DeleteFileW' or api == 'DeleteFileA':
        pass

    elif api == 'NtOpenFile':
        file_handle = call.get('arguments')[0].get('value')
        filename = call.get('arguments')[2].get('value')

    elif api == 'FindFirstFileExW':
        pass

    elif api == 'NtQueryInformationFile':
        pass

    elif api == 'NtQuerySystemInformation':
        pass

    elif api == 'CopyFileA':
        pass

    elif api == 'MoveFileWithProgressW':
        pass

    elif api == 'NtQueryDirectoryFile':
        pass

    elif api == 'NtOpenDirectoryObject':
        pass

    elif api == 'NtSetInformationFile':
        pass

    elif api == 'SetFileAttributesW':
        pass

    elif api == 'SetFileAttributesA':
        pass

    elif api == 'RegSetValueExA' or api == 'RegSetValueExW':
        reg_handle = call.get('arguments')[0].get('value')

    elif api == 'RegOpenKeyExW' or api == 'RegOpenKeyExA' or api == 'NtOpenKey' or api == 'NtOpenKeyEx':
        reg_handle = call.get('arguments')[2].get('value')

    elif api == 'RegCreateKeyExA' or api == 'RegCreateKeyExW':
        reg_handle = call.get('arguments')[4].get('value')
        pass

    elif api == 'NtQueryValueKey' or api == 'RegQueryValueExW' or api == 'RegQueryValueExA':
        reg_handle = call.get('arguments')[0].get('value')

    elif api == 'CreateProcessInternalW':
        process_handle = call.get('arguments')[5].get('value')
        thread_handle = call.get('arguments')[6].get('value')

    elif api == 'RtlCreateUserProcess':
        pass

    elif api == 'ShellExecuteExW':
        pass

    elif api == 'ReadProcessMemory':
        pass

    elif api == 'WriteProcessMemory':
        pass

    elif api == 'Process32FirstW':
        pass

    elif api == 'Process32NextW':
        pass

    elif api == 'FindWindowA' or api == 'FindWindowW':
        pass

    elif api == 'GetForegroundWindow':
        pass

    elif api == 'GetCursorPos':
        pass

    elif api == 'GetKeyState':
        pass

    elif api == 'GetComputerNameA':
        pass

    elif api == 'GetUserNameW':
        pass

    elif api == 'GetSystemInfo':
        pass

    elif api == 'GetSystemTimeAsFileTime':
        pass

    elif api == 'GetTempPathW':
        pass

    elif api == 'GetSystemDirectoryW':
        pass

    elif api == 'GetSystemMetrics':
        pass

    elif api == 'gethostbyname':
        pass

    elif api == 'connect':
        pass

    elif api == 'getaddrinfo':
        pass

    elif api == 'NtCreateMutant':
        pass

    elif api == 'NtOpenMutant':
        pass

    elif api == 'SendNotifyMessageA':
        pass

    elif api == 'NtQueueApcThread':
        pass

    elif api == 'NtSetContextThread':
        pass

    elif api == 'NtResumeThread':
        pass

    elif api == 'NtOpenProcess':
        pass

    elif api == 'MessageBoxTimeoutW':
        pass

    elif api == 'CreateThread' or api == 'NtCreateThreadEx':
        pass

    elif api == 'CreateRemoteThread' or api == 'CreateRemoteThreadEx':
        process_handle = call.get('arguments')[0].get('value')
        thread_id = call.get('arguments')[4].get('value')

    elif api == 'NtOpenThread':
        pass

    elif api == 'CreateServiceA' or api == 'CreateServiceW':
        pass

    elif api == 'EnumServicesStatusA':
        pass

    elif api == 'InternetConnectA' or api == 'InternetConnectW':
        pass

    elif api == 'HttpOpenRequestA' or  api =='HttpOpenRequestW':
        pass

    elif api == 'HttpSendRequestA' or api == 'HttpSendRequestW':
        pass

    elif api == 'SetWindowsHookExA' or api == 'SetWindowsHookExW':
        pass

    elif api == '__exception__':
        pass

    elif api == 'WriteConsoleW':
        pass

    elif api == 'WriteConsoleA':
        pass

    elif api == 'DrawTextExA':
        pass

    elif api == 'DrawTextExW':
        pass

    elif api == 'OutputDebugStringA':
        pass

    else:
        pass


def main():
    parser = argparse.ArgumentParser(description='Convert Cuckoo JSON reports to API behavior graphs')
    parser.add_argument('input_dir')
    parser.add_argument('output_dir')
    parser.add_argument('verdict')
    args = parser.parse_args()

    input_dir = args.input_dir
    output_dir = args.output_dir
    verdict = args.verdict
    if verdict == '0':
        verdict = 0
    elif verdict == '1':
        verdict = 1
    else:
        print('Error: Verdict must be 0 or 1')
        return

    for filename in os.listdir(input_dir):
        # Open cuckoo report file
        with open(f'{input_dir}/{filename}', 'rt') as cuckoo_report:
            try:
                data = json.load(cuckoo_report)
            except:
                print(f'Error: Could not parse {input_dir} as JSON')
                continue

        behavior = data.get('behavior')
        if behavior is None:
            print(f'Error: {input_dir} has no behavior section')
            continue

        processes = behavior.get('processes')
        if processes is None:
            print(f'Error: {input_dir} has no processes section')
            continue

        for process in processes:
            for call in process.get('calls'):
                api = call.get('api')

if __name__ == "__main__":
    main()
