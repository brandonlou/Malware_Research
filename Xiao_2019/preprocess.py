import argparse
import json
import os

api_set = set()

def main():
    parser = argparse.ArgumentParser(description='Convert Cuckoo JSON reports to API behavior graphs')
    parser.add_argument('input_dir')
    parser.add_argument('output_dir')
    parser.add_argument('verdict')
    args = parser.parse_args()

    input_dir = args.input_dir
    output_dir = args.output_dir
    verdict = args.verdict
    if verdict == '0':
        verdict = 0
    elif verdict == '1':
        verdict = 1
    else:
        print('Error: Verdict must be 0 or 1')
        return

    for filename in os.listdir(input_dir):
        # Open cuckoo report file
        with open(f'{input_dir}/{filename}', 'rt') as cuckoo_report:
            try:
                data = json.load(cuckoo_report)
            except:
                print(f'Error: Could not parse {input_dir} as JSON')
                return

        behavior = data.get('behavior')
        if behavior is None:
            print(f'Error: {input_dir} has no behavior section')
            return

        processes = behavior.get('processes')
        if processes is None:
            print(f'Error: {input_dir} has no processes section')
            return

        for process in processes:
            for call in process.get('calls'):
                api = call.get('api')

                ### SERVICE ###
                if api == 'OpenSCManager':
                    pass
                # OpenService
                # StartService

                ### PROCESS ###
                # NtOpenSection
                # ZwMapViewOfSection
                # NtFreeVirtualMemory
                # NtCreateSection
                elif api == 'CreateProcessInternalW':
                    process_handle = call.get('arguments')[5].get('value')
                    thread_handle = call.get('arguments')[6].get('value')
                elif api == 'ExitProcess':
                    pass
                elif api == 'NtWriteVirtualMemory':
                    process_handle = call.get('arguments')[0].get('value')

                ### THREADS ###
                elif api == 'CreateRemoteThread':
                    process_handle = call.get('arguments')[0].get('value')
                    thread_id = call.get('arguments')[4].get('value')
                elif api == 'ExitThread':
                    thread_id = call.get('thread_id')

                ### FILESYSTEM ###
                elif api == 'NtCreateFile':
                    file_handle = call.get('arguments')[0].get('value')
                    filename = call.get('arguments')[2].get('value')
                elif api == 'NtReadFile':
                    file_handle = call.get('arguments')[0].get('value')
                elif api == 'NtSetInformationFile':
                    pass
                elif api == 'NtOpenFile':
                    file_handle = call.get('arguments')[0].get('value')
                    filename = call.get('arguments')[2].get('value')
                elif api == 'NtWriteFile':
                    file_handle = call.get('arguments')[0].get('value')
                # DeviceIOControl
                # CreateDirectory
                elif api == 'DeleteFileW' or api == 'DeleteFileA':
                    pass
                elif api == 'FindFirstFileExW':
                    pass # TODO
                # NtDeviceIoControlFile
                elif api == 'NtQueryInformationFile':
                    pass # TODO

                ### REGISTRY ###
                elif api == 'RegOpenKeyExW' or api == 'RegOpenKeyExA':
                    reg_handle = call.get('arguments')[2].get('value')
                elif api == 'RegSetValueExA' or api == 'RegSetValueExW':
                    reg_handle = call.get('arguments')[0].get('value')
                elif api == 'RegCloseKey':
                    reg_handle = call.get('arguments')[0].get('value')
                elif api == 'RegDeleteValueA':
                    reg_handle = call.get('arguments')[0].get('value')
                elif api == 'RegQueryValueExW' or api == 'RegQueryValueExA':
                    reg_handle = call.get('arguments')[0].get('value')
                elif api == 'RegCreateKeyExA' or api == 'RegCreateKeyExW':
                    reg_handle = call.get('arguments')[4].get('value')
                elif api == 'NtOpenKey' or api == 'NtOpenKeyEx':
                    pass
                elif api == 'NtQueryValueKey':
                    print(call)
                    pass
                elif api == 'RegEnumValueW':
                    reg_handle = call.get('arguments')[0].get('value')

                # RegEnumKey
                # NtQueryKey
                # RegQueryInfoKey

                ### SYNCHRONIZATION ###
                elif api == 'NtCreateMutant':
                    pass
                elif api == 'NtOpenMutant':
                    pass

                ### NETWORK ###
                # WSAStartup
                elif api == 'getaddrinfo':
                    pass

                ### SYSTEM ###
                elif api == 'NtDelayExecution':
                    pass
                elif api == 'FindWindowA' or api == 'FindWindowW':
                    pass
                elif api == 'SetWindowsHookExA' or api == 'SetWindowsHookExW':
                    pass # TODO
                elif api == 'NtClose':
                    handle = call.get('arguments')[0].get('value')
                # RemoveDirectory
                # GetSystemMetrics
                # LookupPrivilegeValue
                else:
                    api_set.add(api)

    print(api_set)


if __name__ == "__main__":
    main()
