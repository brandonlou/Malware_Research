def api_resource(call, current_pid, file_handles, registry_handles,
                 process_handles, process_identifiers, thread_handles,
                 window_handles, connect_handles, request_handles):

    if call['api'] == 'NtReadFile':
        file_handle = call['arguments']['file_handle']
        filepath = file_handles[call['arguments']['file_handle']]

    elif call['api'] == 'NtWriteFile':
        filepath = call['arguments']['filepath']

    elif call['api'] == 'NtCreateFile':
        filepath = call['arguments']['filepath']
        file_handles[call['arguments']['file_handle']] = filepath

    elif call['api'] == "DeleteFileW" or call['api'] == "DeleteFileA":
        filepath = call['arguments']['filepath']

    elif call['api'] == 'NtOpenFile' :
        filepath = call['arguments']['filepath']
        file_handles[call['arguments']['file_handle']] = filepath

    elif call['api'] == 'FindFirstFileExW':
        filepath = call['arguments']['filepath']

    elif call['api'] == 'NtQueryInformationFile':
        filepath = file_handles[call['arguments']['file_handle']]

    elif call['api'] == 'NtQuerySystemInformation':
        #no resource
        pass

    elif call['api'] == 'CopyFileA':
        filepath1 = call['arguments']['oldfilepath']
        filepath2 = call['arguments']['newfilepath']

    elif call['api'] == 'MoveFileWithProgressW':
        filepath = call['arguments']['oldfilepath']
        filepath2 = call['arguments']['newfilepath']

    elif call['api'] == 'NtOpenDirectoryObject':
        filepath = call['arguments']['dirpath']

    elif call['api'] == 'NtSetInformationFile':
        filepath = file_handles[call['arguments']['file_handle']]

    elif call['api'] == 'SetFileAttributesW' or call['api'] == 'SetFileAttributesA':
        filepath = call['arguments']['filepath']

    elif call['api'] == 'RegSetValueExA' or call['api'] == 'RegSetValueExW':
        regkey = call['arguments']['regkey']

    elif call['api'] == 'RegOpenKeyExW' or call['api'] == 'RegOpenKeyExA':
        regkey = call['arguments']['regkey']
        registry_handles[call['arguments']['key_handle']] = regkey

    elif call['api'] == 'NtOpenKey' or call['api'] == 'NtOpenKeyEx':
        regkey = call['arguments']['regkey']
        registry_handles[call['arguments']['key_handle']] = regkey

    elif call['api'] == 'RegCreateKeyExA' or call['api'] == 'RegCreateKeyExW':
        regkey = call['arguments']['regkey']
        registry_handles[call['arguments']['key_handle']] = regkey

    elif call['api'] == 'NtQueryValueKey':
        regkey = call['arguments']['regkey']

    elif call['api'] == 'RegQueryValueExW' or call['api'] == 'RegQueryValueExA':
        regkey = call['arguments']['regkey']

    elif call['api'] == 'CreateProcessInternalW':
        command_line = call['arguments']['command_line'] #usually a file

    elif call['api'] == 'RtlCreateUserProcess':
        filepath = call['arguments']['filepath']

    elif call['api'] == 'ShellExecuteExW':
        filepath = call['arguments']['filepath']

    elif call['api'] == 'ReadProcessMemory':
        process_handle = call['arguments']['process_handle']
        pid = process_handles[process_handle][0]

    elif call['api'] == 'WriteProcessMemory':
        pid = call['arguments']['process_identifier'][0]

    elif call['api'] == 'Process32FirstW':
        pid = call['arguments']['process_identifier']
        handle = call['arguments']['snapshot_handle']
        name = call['arguments']['process_name']
        process_handles[handle] = (pid, name)
        process_identifiers[pid] = (handle, name)

    elif call['api'] == 'Process32NextW':
        pid = call['arguments']['process_identifier']
        handle = call['arguments']['snapshot_handle']
        name = call['arguments']['process_name']
        process_handles[handle] = (pid, name)
        process_identifiers[pid] = (handle, name)

    elif call['api'] == 'FindWindowA' or call['api'] == 'FindWindowW':
        handle = '0x{:08x}'.format(call['return_value'])
        window = call['arguments']['class_name'] + ':' + call['arguments']['window_name']
        window_handles[handle] = window

    elif call['api'] == 'GetForegroundWindow':
        if call['return_value'] != 0:
            handle = '0x{:08x}'.format(call['return_value'])
            window = 'FOREGROUND'
            window_handles[handle] = window

    elif call['api'] == 'GetCursorPos':
        resource = 'CURSOR'

    elif call['api'] == 'GetKeyState':
        resource = 'KEYBOARD\\' + str(call['arguments']['key_code'])

    elif call['api'] == 'GetComputerNameA':
        #no resource
        pass

    elif call['api'] == 'GetUserNameW':
        #no resource
        pass

    elif call['api'] == 'GetSystemInfo':
        #no resource
        pass

    elif call['api'] == 'GetTempPathW':
        filepath = call['arguments']['dirpath']

    elif call['api'] == 'GetSystemDirectoryW':
        filepath = call['arguments']['dirpath']

    elif call['api'] == 'GetSystemMetrics':
        #no resource
        pass

    elif call['api'] == 'gethostbyname':
        hostname = call['arguments']['hostname']

    elif call['api'] == 'connect':
        hostname = call['arguments']['ip_address']

    elif call['api'] == 'getaddrinfo':
        hostname = call['arguments']['hostname']

    elif call['api'] == 'NtCreateMutant':
        mutant_name = call['arguments']['mutant_name']

    elif call['api'] == 'NtOpenMutant':
        mutant_name = call['arguments']['mutant_name']

    elif call['api'] == 'SendNotifyMessageA':
        window_handle = call['arguments']['window_handle']
        window = window_handles[window_handle]
        pid = call['arguments']['process_identifier']

    elif call['api'] == 'NtQueueApcThread':
        pid = call['arguments']['process_identifier']

    elif call['api'] == 'NtSetContextThread':
        pid = call['arguments']['process_identifier']

    elif call['api'] == 'NtResumeThread':
        pid = call['arguments']['process_identifier']

    elif call['api'] == 'NtOpenProcess':
        handle = call['arguments']['process_handle']
        pid = call['arguments']['process_identifier']
        process_name = ''

        if pid in process_identifiers:
            process_name = process_identifiers[handle][1]
        elif pid in process_handles:
            process_name = process_handles[handle][1]

    elif call['api'] == 'MessageBoxTimeoutW':
        #no resource
        pass

    elif call['api'] == 'CreateThread':
        tid = call['arguments']['thread_identifier']
        pid = current_pid
        thread_name = ''

        handle = '0x{:08x}'.format(call['return_value'])
        thread_handles[handle] = (current_pid, tid, '')

        handle = '0x{:016x}'.format(call['return_value'])
        thread_handles[handle] = (current_pid, tid, '')

    elif call['api'] == 'NtCreateThreadEx':
        tid = 0
        pid = call['arguments']['process_identifier']
        thread_name = call['arguments']['thread_name']

        thread_handles[call['arguments']['thread_handle']] = (pid, 0, thread_name)

    elif call['api'] == 'CreateRemoteThread':
        pid = call['arguments']['process_identifier']
        tid = call['arguments']['thread_identifier']
        thread_name = ''

        thread_handle = '0x{:08x}'.format(call['return_value'])
        thread_handles[thread_handle] = (pid, tid, '')

    elif call['api'] == 'CreateRemoteThreadEx':
        pid = 0
        tid = call['arguments']['thread_identifier']
        process_handle = call['arguments']['process_handle']

        if process_handle in process_handles:
            pid = process_handles[process_handle][0]

        if process_handle == '0xffffffff':
            pid = current_pid

        thread_handle = '0x{:08x}'.format(call['return_value'])
        thread_handles[thread_handle] = (pid, tid, '')

    elif call['api'] == 'NtOpenThread':
        pid = current_pid
        thread_name = call['arguments']['thread_name']

        if call['arguments']['process_identifier'] != 0:
            pid = call['arguments']['process_identifier']

        thread_handles[call['arguments']['thread_handle']] = (pid, 0, thread_name)

    elif call['api'] == 'CreateServiceA' or call['api'] == 'CreateServiceW':
        filepath = call['arguments']['filepath']
        params = filepath.split(' ')
        filepath = params[0]

        service_handle = call['arguments']['service_handle']
        service_handles[service_handle] = filepath

    elif call['api'] == 'EnumServicesStatusA':
        service_handle = call['arguments']['service_handle']

        if service_handle in service_handles:
            filepath = service_handles[service_handle]

    elif call['api'] == 'InternetConnectA' or call['api'] == 'InternetConnectW':
        hostname = call['arguments']['hostname']

        handle = '0x{:08x}'.format(call['return_value'])
        connect_handles[handle] = hostname

        handle = '0x{:016x}'.format(call['return_value'])
        connect_handles[handle] = hostname

    elif call['api'] == 'HttpOpenRequestA' or call['api'] == 'HttpOpenRequestW':
        handle = call['arguments']['connect_handle']

        if handle in connect_handles:
            hostname = connect_handles[handle]
            http_method = call['arguments']['http_method']

            request_handle = '0x{:08x}'.format(call['return_value'])
            request_handles[request_handle] = hostname

            request_handle = '0x{:016x}'.format(call['return_value'])
            request_handles[request_handle] = hostname

    elif call['api'] == 'HttpSendRequestA' or call['api'] == 'HttpSendRequestW':
        handle = call['arguments']['request_handle']

        if handle in request_handles:
            hostname = request_handles[handle]

    elif call['api'] == 'SetWindowsHookExA' or call['api'] == 'SetWindowsHookExW':
        hook_identifier = call['flags']['hook_identifier']

    elif call['api'] == '__exception__':
        module = 'NOMOD'
        if 'module' in call['arguments']['exception']:
             module = call['arguments']['exception']['module']

    elif call['api'] == 'WriteConsoleW' or call['api'] == 'WriteConsoleA':
        console = call['arguments']['console_handle']

    elif call['api'] == 'DrawTextExA' or call['api'] == 'DrawTextExW':
        #no resource
        pass

    elif call['api'] == 'OutputDebugStringA':
        #no resource
        pass

    else:
        pass


# Example
file_handles = {}
registry_handles = {}
process_handles = {}
process_identifiers = {}
thread_handles = {}
window_handles = {}
connect_handles = {}
request_handles = {}

for proc in data['behavior']['processes']:
    current_pid = proc['pid']

    for call in proc['calls']:
        api_resource(call, current_pid, file_handles, registry_handles,
                     process_handles, process_identifiers, thread_handles,
                     window_handles, connect_handles, request_handles)
